name: Build

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: mstorsjo/llvm-mingw:latest
    steps:
#      - uses: actions/checkout@v3
#        with:
#          repository: libsdl-org/SDL
#          path: sdl
#          ref: SDL2
#      - name: build-sdl
#        run: |
#          echo ${{ github.workspace }}
#          mkdir -p ${{ github.workspace }}/local
#          mkdir build
#          cd build
#          ../sdl/configure --host=aarch64-w64-mingw32 --prefix=${{ github.workspace }}/local
#          make -j16
#          make install
#      - name: build x264
#        run: |
#          git clone --depth=1 https://code.videolan.org/videolan/x264.git x264
#          cd x264
#          export PKG_CONFIG_LIBDIR=${{ github.workspace }}/local/lib/pkgconfig
#          ./configure --host=aarch64-w64-mingw32 --prefix=${{ github.workspace }}/local --enable-pic --extra-cflags="-mfpu=neon" --cross-prefix=aarch64-w64-mingw32- --enable-shared --enable-static
#          make -j16
#          make install
      - uses: actions/checkout@v3 
        with:
          repository: FFmpeg/FFmpeg
          path: ffmpeg
          ref: refs/tags/n4.2.1
      - name: build ffmpeg
        run: |
          # /opt/llvm-mingw/aarch64-w64-mingw32/
          # ln -s local/bin/sdl2-config local/bin/aarch64-w64-mingw32-sdl2-config
          # chmod +x local/bin/sdl2-config local/bin/aarch64-w64-mingw32-sdl2-config
          # export PATH=$PATH:${{ github.workspace }}/local/bin

          # do not work check : https://trac.ffmpeg.org/wiki/HWAccelIntro#DXVA2
          # might need more than that
          # curl https://download.videolan.org/pub/contrib/dxva2api.h -o /opt/llvm-mingw/aarch64-w64-mingw32/include/dxva2api.h
          
          cd ffmpeg
          # sed -i 's/0x020100/0x030000/' ./configure
          export PKG_CONFIG_LIBDIR=${{ github.workspace }}/local/lib/pkgconfig
          #./configure --pkg-config=/usr/bin/x86_64-pc-linux-gnu-pkg-config --pkgconfigdir=${{ github.workspace }}/local/lib/pkgconfig --cross-prefix=aarch64-w64-mingw32- --arch=arm64 --target-os=mingw32 --enable-sdl --disable-doc --prefix=${{ github.workspace }}/local --disable-static --enable-shared --enable-libx264 --enable-gpl --enable-nonfree
          ./configure --pkg-config=/usr/bin/x86_64-pc-linux-gnu-pkg-config --pkgconfigdir=${{ github.workspace }}/local/lib/pkgconfig --cross-prefix=aarch64-w64-mingw32- --arch=arm64 --target-os=mingw32 --disable-doc --prefix=${{ github.workspace }}/local --disable-static --enable-shared --disable-libx264 --enable-gpl --enable-nonfree
          
          make -j16
          make install
          cd ..
          
          # debug
          echo "github.workspace=${{ github.workspace }}"
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "runner.workspace=${{ runner.workspace }}"
          echo "RUNNER_WORKSPACE=$RUNNER_WORKSPACE"
          echo "pwd=$(pwd)"
          #mkdir -p ${{ github.workspace }}/local
          #touch ${{ github.workspace }}/local/foo
          #echo "${{ github.workspace }} content:"
          #ls -l ${{ github.workspace }}
          #ls -l ${{ github.workspace }}/local
          
          cp -r ${{ github.workspace }}/local $GITHUB_WORKSPACE
          ls $GITHUB_WORKSPACE
      - name: Cache build output
        id: cache-save-build-ouput
        uses: actions/cache/save@v3
        with:
          path: |
            ./local
          key: ${{ runner.os }}-build-output-run_${{ github.run_id }}

  publish:
    runs-on: ubuntu-latest
    # Warning: restore cache saved by build job requires to use the exact same container image, because cache version considerations.
    # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
    # https://github.com/actions/cache#cache-version
    # `enableCrossOsArchive: true` does not solve the issue.
    container:
      image: mstorsjo/llvm-mingw:latest
    needs: build
    steps:
      - name: Restore build ouput cache
        uses: actions/cache/restore@v3
        id: cache-restore-build-ouput
        with:
          path: |
            ./local
          key: ${{ runner.os }}-build-output-run_${{ github.run_id }}
          fail-on-cache-miss: true
      - name: archive
        run: |
          echo "restored cache:"
          ls ./local
          mkdir output
          mkdir output/bin
          mkdir output/lib
          mkdir output/lib/pkgconfig
          readlink -f output
          cp local/bin/*.exe local/bin/*.dll output/bin
          cp local/bin/*.lib local/lib/*.def output/lib
          cp local/lib/pkgconfig/*.pc output/lib/pkgconfig
          cp -r local/include output
          # tar cfz all.tar.gz local/bin
          cd output
          zip -r -D ../ffmpeg-4.2.1-wos-arm64.zip .
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./ffmpeg-4.2.1-wos-arm64.zip
          asset_name: ffmpeg-4.2.1-wos-arm64.zip
          asset_content_type: application/zip
